module UI.Board where

import qualified Brick as B
import           Brick.Widgets.Border (border)
import qualified Data.Map.Strict as M
import           Data.Maybe (fromMaybe)
import           Game.Types (GameState(..), Stone(..))


-- | Render a Go board based on the current GameState.
drawBoard :: GameState -> B.Widget n
drawBoard gs@GameState{..} =
    border
  $ B.vBox [ B.hBox [ drawCell (x, y)
                    | x <- [0 .. boardSize - 1] ]
           | y <- [0 .. boardSize - 1] ]
  where
    drawCell coord =
      case M.lookup coord stones of
        Nothing          -> B.str "· "
        Just BlackStone  -> B.withAttr "blackStone" $ B.str "● "
        Just WhiteStone  -> B.withAttr "whiteStone" $ B.str "○ "